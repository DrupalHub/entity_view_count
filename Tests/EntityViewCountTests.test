<?php

/**
 * @file
 * Contains simple test for entity view count module.
 */

class EntityViewCountTests extends DrupalWebTestCase {

  /**
   * @var \stdClass
   *
   * The first node object.
   */
  protected $node1;

  /**
   * @var \stdClass
   *
   * The second node object.
   */
  protected $node2;

  /**
   * @var \stdClass
   *
   * The first user object.
   */
  protected $user1;

  /**
   * @var \stdClass
   *
   * The second user object.
   */
  protected $user2;

  public static function getInfo() {
    return array(
      'name' => 'Entity view count.',
      'description' => 'Testing the basic functionality of the entity view count module.',
      'group' => 'Entity view count',
    );
  }

  /**
   * Overrides parent::setUp().
   */
  public function setUp() {
    parent::setUp(array('entity_view_count', 'entity_test'));

    // Disable counter for user page.
    variable_del('entity_view_count_track_user');

    // Creating the users.
    $this->user1 = $this->drupalCreateUser(array('access content', 'access user profiles', 'view entity view count field'));
    $this->user2 = $this->drupalCreateUser(array('access content', 'access user profiles', 'view entity view count field'));

    // Creating content types and his instances.
    $contentType = $this->drupalCreateContentType();
    $this->node1 = $this->drupalCreateNode(array('type' => $contentType->type, 'uid' => $this->user1->uid));
    $this->node2 = $this->drupalCreateNode(array('type' => $contentType->type, 'uid' => $this->user2->uid));

    // Visit the the first node multiple times by user1.
    $this->drupalLogin($this->user1);
    $this->visitNumberOfTimes(5, $this->node1->nid);

    // Visit the second node by user 2 6 times.
    $this->drupalLogin($this->user2);
    $this->visitNumberOfTimes(6, $this->node2->nid);
  }

  /**
   * Visit the node a defined number of times.
   *
   * @param Integer $times
   *  The number of times.
   * @param integer $nid
   *  The node ID.
   */
  private function visitNumberOfTimes($times, $nid) {
    for ($i = 0; $i < $times; $i++) {
      $this->drupalGet('node/' . $nid);
    }
  }

  /**
   * Verifying the number of times that a node was viewed and the number of
   * times the users entity was viewed. They both need to be 5.
   */
  public function _testEntityViewCount() {
    $this->assertTrue(entity_view_count_get_entity_count('node', $this->node1->nid) == 5, 'The node was viewed for 5 times.');
    $this->assertTrue(entity_view_count_user_viewing_entities_count($this->user1->uid) == 5, 'The user 2 viewed entities for 5 times.');
    $this->assertTrue(entity_view_count_user_owned_entity_count($this->user2->uid) == 6, 'The user 2 entities viewed 6 times.');
  }

  /**
   * Verifying the field value when displaying him.
   */
  function _testFieldValue() {
    // Attaching the field for node and a user.
    field_create_field(array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'field_entity_view_count',
      'foreign keys' => array(),
      'indexes' => array(),
      'locked' => 0,
      'module' => 'entity_view_count',
      'settings' => array(),
      'translatable' => 0,
      'type' => 'entity_view_count',
    ));

    // Attaching the field for node.
    field_create_instance(array(
      'bundle' => $this->node1->type,
      'default_value' => NULL,
      'deleted' => 0,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'inline',
          'module' => 'entity_view_count',
          'settings' => array(),
          'type' => 'default',
          'weight' => 11,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'field_entity_view_count',
      'label' => 'Entity view count',
      'required' => 0,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 0,
        'module' => 'entity_view_count',
        'settings' => array(),
        'type' => 'default',
        'weight' => 0,
      ),
    ));

    // Attaching the field for user.
    field_create_instance(array(
      'bundle' => 'user',
      'default_value' => NULL,
      'deleted' => 0,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'inline',
          'module' => 'entity_view_count',
          'settings' => array(),
          'type' => 'user_viewing_entities',
          'weight' => 0,
        ),
      ),
      'entity_type' => 'user',
      'field_name' => 'field_entity_view_count',
      'label' => 'Entity view count',
      'required' => 0,
      'settings' => array(
        'user_register_form' => 0,
      ),
      'widget' => array(
        'active' => 0,
        'module' => 'entity_view_count',
        'settings' => array(),
        'type' => 'default',
        'weight' => 8,
      ),
    ));

    // Testing the field value when displaying a node.
    $this->drupalGet('node/' . $this->node1->nid);
    $field = $this->xpath("//div[contains(@class, 'field-type-entity-view-count')]//div[@class='field-items']//div[.='5']");
    $this->assertTrue($field, 'The field is 5.');

    // Testing the field value when displaying a user.
    $this->drupalGet('user/' . $this->user1->uid);
    $field = $this->xpath("//div[contains(@class, 'field-type-entity-view-count')]//div[@class='field-items']//div[.='5']");
    $this->assertTrue($field, 'The field is 5.');

    // Change the field formatter.
    $instance = field_info_instance('user', 'field_entity_view_count', 'user');
    $instance['display']['default']['type'] = 'user_viewing_entities';
    field_update_instance($instance);

    // Verify the User entity's views formatter for user 1.
    $this->drupalGet('user/' . $this->user1->uid);
    $field = $this->xpath("//div[contains(@class, 'field-type-entity-view-count')]//div[@class='field-items']//div[.='5']");
    $this->assertTrue($field, 'The field is 5.');

    // Verify the User entity's views formatter for user 2.
    $this->drupalGet('user/' . $this->user2->uid);
    $field = $this->xpath("//div[contains(@class, 'field-type-entity-view-count')]//div[@class='field-items']//div[.='7']");
    $this->assertTrue($field, 'The field is 7.');
  }

  /**
   * Test the bundle fields.
   */
  public function testBundle() {
    $entity = entity_create('entity_test', array('name' => $this->randomName()));
    $entity->save();
    $evc_first = $this->createBundle($entity, 'first_bundle', 'first_bundle');

    $entity = entity_create('entity_test', array('name' => $this->randomName()));
    $entity->save();
    $evc_second = $this->createBundle($entity, 'second_bundle', 'second_bundle');

    // Querying against the entities.
    $wrapper = entity_metadata_wrapper('entity_view_count', $evc_second->id);

    $query = new EntityFieldQuery();
    $result = $query
      ->entityCondition('entity_type', 'entity_view_count')
      ->fieldCondition('second_bundle', 'value', $wrapper->second_bundle->value())
      ->execute();

    $id = array_keys($result['entity_view_count']);

    $this->assertNotEqual(reset($id), $evc_first->id, 'The query return different entity view count IDs.');

  }

  /**
   * Creating a bundle easily.
   *
   * @param $entity
   *   The entity test object.
   * @param $field_name
   *   The field name.
   * @param $bundle
   *   The bundle name of the entity view_count
   *
   * @return EntityViewCount
   */
  protected function createBundle($entity, $field_name, $bundle) {
    field_create_field(array(
      'field_name' => $field_name,
      'type' => 'text',
    ));
    field_create_instance(array(
      'field_name' => $field_name,
      'entity_type' => 'entity_view_count',
      'bundle' => $bundle,
      'widget' => array(
        'type' => 'text_textfield',
      ),
    ));

    $entity_view_count = entity_view_count_create(array());
    $entity_view_count->type = $bundle;
    $entity_view_count->entity_type = 'entity_test';
    $entity_view_count->entity_id = $entity->pid;

    $wrapper = entity_metadata_wrapper('entity_view_count', $entity_view_count);
    $wrapper->{$field_name}->set($this->randomString());
    $wrapper->save();

    return $entity_view_count;
  }

}
